package com.openclassrooms.starterjwt.services;

import com.openclassrooms.starterjwt.models.Teacher;
import com.openclassrooms.starterjwt.repository.TeacherRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Integration tests for TeacherService
 * Tests the service layer with real database interactions using H2 in-memory database
 */
@SpringBootTest
@ActiveProfiles("test")
@Transactional
class TeacherServiceIntegrationTest {

    @Autowired
    private TeacherService teacherService;

    @Autowired
    private TeacherRepository teacherRepository;

    private Teacher testTeacher;
    private Teacher testTeacher2;

    @BeforeEach
    void setUp() {
        // Clean database before each test
        teacherRepository.deleteAll();

        // Create test teachers
        testTeacher = Teacher.builder()
                .firstName("John")
                .lastName("YogaMaster")
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
        testTeacher = teacherRepository.save(testTeacher);

        testTeacher2 = Teacher.builder()
                .firstName("Jane")
                .lastName("YogaExpert")
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
        testTeacher2 = teacherRepository.save(testTeacher2);
    }

    @Test
    void contextLoads() {
        // Verify Spring context loads correctly
        assertNotNull(teacherService);
        assertNotNull(teacherRepository);
    }

    // ==================== FIND ALL INTEGRATION TESTS ====================

    @Test
    void findAll_ShouldReturnAllTeachersFromDatabase_WhenTeachersExist() {
        // Act
        List<Teacher> teachers = teacherService.findAll();

        // Assert
        assertNotNull(teachers);
        assertEquals(2, teachers.size());

        // Verify both teachers are present
        assertTrue(teachers.stream().anyMatch(t -> "John".equals(t.getFirstName()) && "YogaMaster".equals(t.getLastName())));
        assertTrue(teachers.stream().anyMatch(t -> "Jane".equals(t.getFirstName()) && "YogaExpert".equals(t.getLastName())));

        // Verify all teachers have IDs (generated by database)
        teachers.forEach(teacher -> {
            assertNotNull(teacher.getId());
            assertTrue(teacher.getId() > 0);
        });
    }

    @Test
    void findAll_ShouldReturnEmptyList_WhenNoTeachersExistInDatabase() {
        // Arrange
        teacherRepository.deleteAll();

        // Act
        List<Teacher> teachers = teacherService.findAll();

        // Assert
        assertNotNull(teachers);
        assertTrue(teachers.isEmpty());
        assertEquals(0, teachers.size());
    }

    @Test
    void findAll_ShouldReturnSingleTeacher_WhenOnlyOneTeacherExistsInDatabase() {
        // Arrange
        teacherRepository.deleteAll();
        Teacher singleTeacher = teacherRepository.save(Teacher.builder()
                .firstName("Solo")
                .lastName("Teacher")
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build());

        // Act
        List<Teacher> teachers = teacherService.findAll();

        // Assert
        assertNotNull(teachers);
        assertEquals(1, teachers.size());
        assertEquals(singleTeacher.getId(), teachers.get(0).getId());
        assertEquals("Solo", teachers.get(0).getFirstName());
        assertEquals("Teacher", teachers.get(0).getLastName());
    }

    @Test
    void findAll_ShouldReturnTeachersWithCompleteData_WhenCalled() {
        // Act
        List<Teacher> teachers = teacherService.findAll();

        // Assert
        assertNotNull(teachers);
        assertEquals(2, teachers.size());

        teachers.forEach(teacher -> {
            assertNotNull(teacher.getId());
            assertNotNull(teacher.getFirstName());
            assertNotNull(teacher.getLastName());
            assertNotNull(teacher.getCreatedAt());
            assertNotNull(teacher.getUpdatedAt());
            assertTrue(teacher.getFirstName().length() > 0);
            assertTrue(teacher.getLastName().length() > 0);
        });
    }

    // ==================== FIND BY ID INTEGRATION TESTS ====================

    @Test
    void findById_ShouldReturnTeacherFromDatabase_WhenTeacherExists() {
        // Act
        Teacher foundTeacher = teacherService.findById(testTeacher.getId());

        // Assert
        assertNotNull(foundTeacher);
        assertEquals(testTeacher.getId(), foundTeacher.getId());
        assertEquals(testTeacher.getFirstName(), foundTeacher.getFirstName());
        assertEquals(testTeacher.getLastName(), foundTeacher.getLastName());
        assertEquals(testTeacher.getCreatedAt(), foundTeacher.getCreatedAt());
        assertEquals(testTeacher.getUpdatedAt(), foundTeacher.getUpdatedAt());
    }

    @Test
    void findById_ShouldReturnNull_WhenTeacherDoesNotExistInDatabase() {
        // Arrange
        Long nonExistentId = 999L;

        // Act
        Teacher foundTeacher = teacherService.findById(nonExistentId);

        // Assert
        assertNull(foundTeacher);
    }

    @Test
    void findById_ShouldReturnCorrectTeacher_WhenMultipleTeachersExistInDatabase() {
        // Act
        Teacher foundTeacher1 = teacherService.findById(testTeacher.getId());
        Teacher foundTeacher2 = teacherService.findById(testTeacher2.getId());

        // Assert
        assertNotNull(foundTeacher1);
        assertNotNull(foundTeacher2);
        assertNotEquals(foundTeacher1.getId(), foundTeacher2.getId());
        
        assertEquals("John", foundTeacher1.getFirstName());
        assertEquals("YogaMaster", foundTeacher1.getLastName());
        
        assertEquals("Jane", foundTeacher2.getFirstName());
        assertEquals("YogaExpert", foundTeacher2.getLastName());
    }

    @Test
    void findById_ShouldReturnTeacherWithCompleteData_WhenTeacherExists() {
        // Act
        Teacher foundTeacher = teacherService.findById(testTeacher.getId());

        // Assert
        assertNotNull(foundTeacher);
        assertNotNull(foundTeacher.getId());
        assertNotNull(foundTeacher.getFirstName());
        assertNotNull(foundTeacher.getLastName());
        assertNotNull(foundTeacher.getCreatedAt());
        assertNotNull(foundTeacher.getUpdatedAt());
        assertTrue(foundTeacher.getId() > 0);
        assertTrue(foundTeacher.getFirstName().length() > 0);
        assertTrue(foundTeacher.getLastName().length() > 0);
    }

    // ==================== EDGE CASES INTEGRATION TESTS ====================

    @Test
    void findById_ShouldThrowException_WhenIdIsNull() {
        // Act & Assert - Spring JPA throws exception for null ID
        assertThrows(Exception.class, () -> {
            teacherService.findById(null);
        });
    }

    @Test
    void findById_ShouldReturnNull_WhenIdIsNegative() {
        // Act
        Teacher foundTeacher = teacherService.findById(-1L);

        // Assert
        assertNull(foundTeacher);
    }

    @Test
    void findById_ShouldReturnNull_WhenIdIsZero() {
        // Act
        Teacher foundTeacher = teacherService.findById(0L);

        // Assert
        assertNull(foundTeacher);
    }

    @Test
    void findById_ShouldReturnNull_WhenIdIsVeryLarge() {
        // Act
        Teacher foundTeacher = teacherService.findById(Long.MAX_VALUE);

        // Assert
        assertNull(foundTeacher);
    }

    // ==================== COMBINED OPERATIONS INTEGRATION TESTS ====================

    @Test
    void findAllThenFindById_ShouldReturnConsistentData() {
        // Act
        List<Teacher> allTeachers = teacherService.findAll();
        Teacher specificTeacher = teacherService.findById(testTeacher.getId());

        // Assert
        assertNotNull(allTeachers);
        assertNotNull(specificTeacher);
        assertEquals(2, allTeachers.size());

        // Verify that the teacher from findById exists in the list from findAll
        assertTrue(allTeachers.stream().anyMatch(t -> t.getId().equals(specificTeacher.getId())));
        
        // Verify data consistency
        Teacher teacherFromList = allTeachers.stream()
                .filter(t -> t.getId().equals(specificTeacher.getId()))
                .findFirst()
                .orElse(null);
        
        assertNotNull(teacherFromList);
        assertEquals(teacherFromList.getFirstName(), specificTeacher.getFirstName());
        assertEquals(teacherFromList.getLastName(), specificTeacher.getLastName());
        assertEquals(teacherFromList.getCreatedAt(), specificTeacher.getCreatedAt());
        assertEquals(teacherFromList.getUpdatedAt(), specificTeacher.getUpdatedAt());
    }

    @Test
    void multipleFindAllCalls_ShouldReturnConsistentResults() {
        // Act
        List<Teacher> teachers1 = teacherService.findAll();
        List<Teacher> teachers2 = teacherService.findAll();

        // Assert
        assertNotNull(teachers1);
        assertNotNull(teachers2);
        assertEquals(teachers1.size(), teachers2.size());
        assertEquals(2, teachers1.size());

        // Verify same teachers are returned in both calls
        for (int i = 0; i < teachers1.size(); i++) {
            Teacher teacher1 = teachers1.get(i);
            Teacher teacher2 = teachers2.get(i);
            assertEquals(teacher1.getId(), teacher2.getId());
            assertEquals(teacher1.getFirstName(), teacher2.getFirstName());
            assertEquals(teacher1.getLastName(), teacher2.getLastName());
        }
    }

    @Test
    void multipleFindByIdCalls_ShouldReturnConsistentResults() {
        // Act
        Teacher teacher1 = teacherService.findById(testTeacher.getId());
        Teacher teacher2 = teacherService.findById(testTeacher.getId());

        // Assert
        assertNotNull(teacher1);
        assertNotNull(teacher2);
        assertEquals(teacher1.getId(), teacher2.getId());
        assertEquals(teacher1.getFirstName(), teacher2.getFirstName());
        assertEquals(teacher1.getLastName(), teacher2.getLastName());
        assertEquals(teacher1.getCreatedAt(), teacher2.getCreatedAt());
        assertEquals(teacher1.getUpdatedAt(), teacher2.getUpdatedAt());
    }

    // ==================== DATABASE PERSISTENCE TESTS ====================

    @Test
    void findById_ShouldPersistDataCorrectly_AcrossTransactions() {
        // Arrange - Get teacher data
        Long teacherId = testTeacher.getId();
        String originalFirstName = testTeacher.getFirstName();
        String originalLastName = testTeacher.getLastName();

        // Act - Find teacher (this will be in a different transaction context)
        Teacher foundTeacher = teacherService.findById(teacherId);

        // Assert - Data should be persisted correctly
        assertNotNull(foundTeacher);
        assertEquals(originalFirstName, foundTeacher.getFirstName());
        assertEquals(originalLastName, foundTeacher.getLastName());
        assertEquals(teacherId, foundTeacher.getId());
    }

    @Test
    void findAll_ShouldReflectDatabaseChanges_WhenDataIsModified() {
        // Arrange - Initial state
        List<Teacher> initialTeachers = teacherService.findAll();
        assertEquals(2, initialTeachers.size());

        // Add a new teacher directly to repository
        Teacher newTeacher = teacherRepository.save(Teacher.builder()
                .firstName("New")
                .lastName("Teacher")
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build());

        // Act - Find all again
        List<Teacher> updatedTeachers = teacherService.findAll();

        // Assert - Should reflect the change
        assertEquals(3, updatedTeachers.size());
        assertTrue(updatedTeachers.stream().anyMatch(t -> t.getId().equals(newTeacher.getId())));
    }

    @Test
    void teacherService_ShouldWorkWithLargeDataset() {
        // Arrange - Clear database and add many teachers
        teacherRepository.deleteAll();
        for (int i = 1; i <= 50; i++) {
            teacherRepository.save(Teacher.builder()
                    .firstName("Teacher" + i)
                    .lastName("LastName" + i)
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .build());
        }

        // Act
        List<Teacher> teachers = teacherService.findAll();

        // Assert
        assertNotNull(teachers);
        assertEquals(50, teachers.size());
        
        // Verify all teachers have unique IDs and proper data
        teachers.forEach(teacher -> {
            assertNotNull(teacher.getId());
            assertNotNull(teacher.getFirstName());
            assertNotNull(teacher.getLastName());
            assertTrue(teacher.getFirstName().startsWith("Teacher"));
            assertTrue(teacher.getLastName().startsWith("LastName"));
        });
    }

    @Test
    void teacherService_ShouldHandleSpecialCharacters_InNames() {
        // Arrange - Clear database
        teacherRepository.deleteAll();
        
        Teacher specialTeacher = teacherRepository.save(Teacher.builder()
                .firstName("José-María")
                .lastName("O'Connor-Smith")
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build());

        // Act
        Teacher foundTeacher = teacherService.findById(specialTeacher.getId());
        List<Teacher> allTeachers = teacherService.findAll();

        // Assert
        assertNotNull(foundTeacher);
        assertEquals("José-María", foundTeacher.getFirstName());
        assertEquals("O'Connor-Smith", foundTeacher.getLastName());
        
        assertEquals(1, allTeachers.size());
        assertEquals("José-María", allTeachers.get(0).getFirstName());
        assertEquals("O'Connor-Smith", allTeachers.get(0).getLastName());
    }
}